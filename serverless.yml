org: mrmatos6837
app: sg-challenges
service: sg-challenge-5
frameworkVersion: "3"

plugins:
  - serverless-offline

custom:
  tableName: "generic-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  httpApi:
    cors: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ItemsTable, Arn]

  environment:
    TABLE_NAME: ${self:custom.tableName}
    REGION: ${self:provider.region}

functions:
  create:
    handler: src/create.handler
    events:
      - httpApi:
          path: /{itemType}
          method: post
    environment:
      TABLE_NAME: ${self:custom.tableName}
      REGION: ${self:provider.region}
  list:
    handler: src/list.handler
    events:
      - httpApi:
          path: /{itemType}
          method: get
  read:
    handler: src/read.handler
    events:
      - httpApi:
          path: /{itemType}/{itemId}
          method: get
  update:
    handler: src/update.handler
    events:
      - httpApi:
          path: /{itemType}/{itemId}
          method: put
  delete:
    handler: src/delete.handler
    events:
      - httpApi:
          path: /{itemType}/{itemId}
          method: delete

resources:
  Resources:
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TableName: ${self:custom.tableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
